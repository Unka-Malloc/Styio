// RUN: /root/styio/styio %s | /usr/bin/FileCheck %s

?(success) \f\ {
  !!!($"For `[` at position {l}, the corresponding `]` was not found.")
}

/*
  CHECK-NEXT: Loop {
  CHECK-NEXT: || Forward (Fill -> If Equal -> Run) {
  CHECK-NEXT: |--| Fill {
  CHECK-NEXT: |----| id { l }}
  CHECK-NEXT: |--| Equal To? { char { '[' } }
  CHECK-NEXT: |--| Run: Block {
  CHECK-NEXT: |----| Add (Inc.) {
  CHECK-NEXT: |------| LHS: id { iloop }
  CHECK-NEXT: |------| RHS: int { 1 }}
  CHECK-NEXT: |----| Binding (Flexible) {
  CHECK-NEXT: |------| Var: id { success }
  CHECK-NEXT: |------| Val: True { }}
  CHECK-NEXT: |----| Binding (Flexible) {
  CHECK-NEXT: |------| Var: id { count }
  CHECK-NEXT: |------| Val: int { 0 }}
  CHECK-NEXT: |----| Loop {
  CHECK-NEXT: |------| Forward (Fill -> If Equal -> Run) {
  CHECK-NEXT: |--------| Fill {
  CHECK-NEXT: |----------| id { r }}
  CHECK-NEXT: |--------| Equal To? { char { ']' } }
  CHECK-NEXT: |--------| Run: Block {
  CHECK-NEXT: |----------| Add (Inc.) {
  CHECK-NEXT: |------------| LHS: id { count }
  CHECK-NEXT: |------------| RHS: int { 1 }}
  CHECK-NEXT: |----------| Conditionals (Only True) {
  CHECK-NEXT: |------------| Condition { LHS: id { count } | Op: <EQ> | RHS: id { iloop } }
  CHECK-NEXT: |------------| Then: Block {
  CHECK-NEXT: |--------------| Append {
  CHECK-NEXT: |----------------| id { map }
  CHECK-NEXT: |----------------| Value: Tuple (
  CHECK-NEXT: |--------------------| id { l }
  CHECK-NEXT: |--------------------| id { r })}
  CHECK-NEXT: |--------------| Binding (Flexible) {
  CHECK-NEXT: |----------------| Var: id { success }
  CHECK-NEXT: |----------------| Val: True { }}
  CHECK-NEXT: |--------------| Break { }}}}}}}}}
*/